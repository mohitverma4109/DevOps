K8S DEPLOYEMNT STRATAGIES:



ROLLING UPDATE:

ROLLING STRATEGIES:
If you have some application servers running then you will create some new servers you will remove old.
in that case your old code and new code will be capable of running at same time in parallel environment that is old environment and new environment.

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment-canary
  labels:
    app: nginx
    version: canary
spec:
  replicas: 6
  selector:
    matchLabels:
      app: nginx
      version: canary
  template:
    metadata:
      labels:
        app: nginx
        version: canary
    spec:
      containers:
        - name: nginx
          image: nginx:1.19
          ports:
            - containerPort: 80

RECREATE:

We need to Down all the servers and we need to deploy new version then we need to bring the services into Running state.
We can also achieve this on another way we need to create a separate infrastructure.
And you can migrate to new infra to minimise the downtime.
But in this case we can run previous, current and new code run in same time.
Here we required some downtime.


apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment-canary
  labels:
    app: nginx
    version: canary
spec:
  replicas: 6
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: nginx
      version: canary
  template:
    metadata:
      labels:
        app: nginx
        version: canary
    spec:
      containers:
        - name: nginx
          image: nginx:1.19
          ports:
            - containerPort: 80




BLUE GREEN: 

BLUE-GREEN DEPLOYMENT:
If we have some existing servers then we create new servers and we will route traffic by using ELB from existing servers to the new servers.
If it will not work properly we need to do Rollback
Blue is the Old code and the Green is New code.
Blue/Green Deployment: Version B is released alongside Version A, and then the traffic is switched over to Version B.



apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment-blue
  labels:
    app: nginx
    version: blue
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
      version: blue
  template:
    metadata:
      labels:
        app: nginx
        version: blue
    spec:
      containers:
        - name: nginx
          image: nginx:1.18
          ports:
            - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment-green
  labels:
    app: nginx
    version: green
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
      version: green
  template:
    metadata:
      labels:
        app: nginx
        version: green
    spec:
      containers:
        - name: nginx
          image: nginx:1.19
          ports:
            - containerPort: 80


CANARY:
Canary: Version B is released to a subgroup of users, then proceeds to a full rollout

apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  labels:
    app: nginx
    version: stable
spec:
  replicas: 5
  selector:
    matchLabels:
      app: nginx
      version: stable
  template:
    metadata:
      labels:
        app: nginx
        version: stable
    spec:
      containers:
        - name: nginx
          image: nginx:1.18
          ports:
            - containerPort: 80
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment-canary
  labels:
    app: nginx
    version: canary
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
      version: canary
  template:
    metadata:
      labels:
        app: nginx
        version: canary
    spec:
      containers:
        - name: nginx
          image: nginx:1.19
          ports:
            - containerPort: 80